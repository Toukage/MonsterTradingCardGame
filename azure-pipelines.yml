---
trigger:
  - master
  - release
variables:
  - group: Secrets
  - name: dockerVersion
    value: 20.10.7
  - name: buildPlatform
    value: Any CPU
  - name: buildConfiguration
    value: Release
  - name: solution
    value: "**/MonsterTradingCardGame.sln"
  - name: project
    value: "**/MonsterTradingCardGame.csproj"
stages:
  - stage: SetupDatabase
    displayName: Start and Init PostgreSQL
    jobs:
      - job: StartPostgres
        pool:
          vmImage: ubuntu-latest
        steps:
          - checkout: self
          - task: DockerInstaller@0
            name: dockerinstaller
            displayName: Docker Installer
            inputs:
              dockerVersion: $(dockerVersion)
          - script: >
              sudo wget -O /usr/local/bin/docker-compose
              "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64"

              sudo chmod +x /usr/local/bin/docker-compose

              docker-compose version
            displayName: Install Docker Compose v2
          - script: |
              docker-compose up -d
              docker-compose ps
            displayName: Start PostgreSQL with Docker Compose
            env:
              POSTGRES_USER: $(postgres-user)
              POSTGRES_PASSWORD: $(postgres-password)
              POSTGRES_DB: $(postgres-db)
          - script: >
              echo "Waiting for PostgreSQL to become ready..."

              for i in {1..30}; do
                docker exec MTCG_Container pg_isready -U $(postgres-user) && break
                sleep 1
              done
            displayName: Waiting for PostgreSQL
          - script: |
              docker-compose down
            displayName: Clean Up Docker Compose
  - stage: Build
    displayName: Build .NET Framework App
    dependsOn: SetupDatabase
    jobs:
      - job: BuildDotNet
        pool:
          vmImage: windows-latest
        steps:
          - task: NuGetToolInstaller@1
            name: Nugettoolinstaller
            displayName: Nuget tool installer
          - task: NuGetCommand@2
            name: Nugetrestore
            displayName: Nuget restore packages
            inputs:
              command: restore
              restoreSolution: $(solution)
              feedsToUse: select
          - task: VSBuild@1
            name: SolutionBuild
            displayName: Building Solution
            inputs:
              solution: $(solution)
              msbuildArgs: /p:DeployOnBuild=true
              platform: $(buildPlatform)
              configuration: $(buildConfiguration)
          - publish: $(System.DefaultWorkingDirectory)
            artifact: source-code
